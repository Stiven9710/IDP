#!/usr/bin/env python3
"""
Script de prueba para el sistema IDP con configuraci√≥n personalizada
Demuestra c√≥mo enviar diferentes configuraciones de campos en la petici√≥n HTTP
"""

import json
import requests
import base64
from typing import Dict, List, Any

def test_factura_colombiana():
    """Configuraci√≥n para factura colombiana"""
    return {
        "fields": [
            {
                "name": "numero_factura",
                "type": "string",
                "description": "El identificador √∫nico de la factura. Busca en frases que contengan 'Factura' o 'Invoice Number'"
            },
            {
                "name": "fecha_factura",
                "type": "date",
                "description": "La fecha de emisi√≥n de la factura. Busca invoice date en la parte superior del documento y format√©ala como YYYY-MM-DD"
            },
            {
                "name": "proveedor_nombre",
                "type": "string",
                "description": "El nombre completo de la empresa o persona que emite la factura. Busca en la parte superior izquierda del documento"
            },
            {
                "name": "cliente_nombre",
                "type": "string",
                "description": "El nombre de la empresa o persona a quien se factura. Busca en la parte superior derecha del documento"
            },
            {
                "name": "total_a_pagar",
                "type": "number",
                "description": "El valor final y total de la factura despu√©s de todos los impuestos. Es el monto m√°s grande y destacado en la secci√≥n de totales o el Total Amount"
            },
            {
                "name": "items_de_linea",
                "type": "array",
                "description": "Extrae todos los productos o servicios listados en la tabla de la factura. Cada l√≠nea debe ser un objeto JSON separado dentro de este array, con las claves: 'descripcion' y 'total_linea'"
            },
            {
                "name": "condiciones_pago",
                "type": "string",
                "description": "Las condiciones de pago especificadas en la factura. Por ejemplo: '30 d√≠as', 'contado', etc."
            },
            {
                "name": "moneda",
                "type": "string",
                "description": "La moneda en la que est√° expresada la factura. Por ejemplo: 'COP', 'USD', 'EUR'"
            },
            {
                "name": "observaciones",
                "type": "string",
                "description": "Cualquier observaci√≥n o nota adicional que aparezca en la factura"
            }
        ],
        "prompt": "Act√∫a como un analista financiero experto especializado en facturas colombianas. Analiza la siguiente factura de un proveedor y extrae los campos detallados a continuaci√≥n de forma precisa.",
        "processing_mode": "gpt_vision_only"
    }

def test_cedula_colombiana():
    """Configuraci√≥n para c√©dula colombiana"""
    return {
        "fields": [
            {
                "name": "numero_cedula",
                "type": "string",
                "description": "N√∫mero de identificaci√≥n de la c√©dula"
            },
            {
                "name": "nombres",
                "type": "string",
                "description": "Nombres completos de la persona"
            },
            {
                "name": "apellidos",
                "type": "string",
                "description": "Apellidos completos de la persona"
            },
            {
                "name": "fecha_nacimiento",
                "type": "date",
                "description": "Fecha de nacimiento en formato YYYY-MM-DD"
            },
            {
                "name": "lugar_nacimiento",
                "type": "string",
                "description": "Ciudad y departamento de nacimiento"
            },
            {
                "name": "fecha_expedicion",
                "type": "date",
                "description": "Fecha de expedici√≥n del documento en formato YYYY-MM-DD"
            },
            {
                "name": "lugar_expedicion",
                "type": "string",
                "description": "Ciudad y departamento de expedici√≥n"
            },
            {
                "name": "estado",
                "type": "string",
                "description": "Estado del documento (vigente, vencida, etc.)"
            }
        ],
        "prompt": "Act√∫a como un analista de documentos de identidad. Analiza la siguiente c√©dula colombiana y extrae la informaci√≥n solicitada de forma precisa.",
        "processing_mode": "gpt_vision_only"
    }

def test_recibo_servicios():
    """Configuraci√≥n para recibo de servicios p√∫blicos"""
    return {
        "fields": [
            {
                "name": "numero_recibo",
                "type": "string",
                "description": "N√∫mero de recibo o factura"
            },
            {
                "name": "empresa_servicio",
                "type": "string",
                "description": "Nombre de la empresa que presta el servicio"
            },
            {
                "name": "tipo_servicio",
                "type": "string",
                "description": "Tipo de servicio (energ√≠a, agua, gas, internet, etc.)"
            },
            {
                "name": "cliente_nombre",
                "type": "string",
                "description": "Nombre del cliente o titular del servicio"
            },
            {
                "name": "direccion_servicio",
                "type": "string",
                "description": "Direcci√≥n donde se presta el servicio"
            },
            {
                "name": "periodo_facturacion",
                "type": "string",
                "description": "Per√≠odo de facturaci√≥n (ej: Enero 2025)"
            },
            {
                "name": "consumo_actual",
                "type": "number",
                "description": "Consumo actual del per√≠odo"
            },
            {
                "name": "total_a_pagar",
                "type": "number",
                "description": "Total a pagar por el servicio"
            },
            {
                "name": "fecha_vencimiento",
                "type": "date",
                "description": "Fecha l√≠mite de pago en formato YYYY-MM-DD"
            }
        ],
        "prompt": "Act√∫a como un analista de servicios p√∫blicos. Analiza el siguiente recibo y extrae la informaci√≥n solicitada de forma precisa.",
        "processing_mode": "gpt_vision_only"
    }

def mostrar_configuracion(config: Dict[str, Any]):
    """Mostrar la configuraci√≥n de campos de forma legible"""
    print(f"\nüìã CONFIGURACI√ìN:")
    print(f"üéØ Modo: {config['processing_mode']}")
    print(f"üìù Prompt: {config['prompt'][:100]}...")
    print(f"üî¢ Total de campos: {len(config['fields'])}")
    
    print("\nüìä CAMPOS A EXTRAER:")
    for i, field in enumerate(config['fields'], 1):
        print(f"  {i}. {field['name']} ({field['type']})")
        print(f"     Descripci√≥n: {field['description']}")
        print()

def generar_comando_curl(config: Dict[str, Any], nombre_test: str):
    """Generar comando curl para probar el endpoint"""
    fields_json = json.dumps(config['fields'])
    prompt = config['prompt']
    mode = config['processing_mode']
    
    print(f"\nüîß COMANDO CURL PARA {nombre_test.upper()}:")
    print("curl -X POST 'http://159.203.149.247:8000/api/v1/documents/process-upload' \\")
    print(f"  -F 'file=@tests/Documentos/Invoice_2082463105.pdf' \\")
    print(f"  -F 'fields_config={fields_json}' \\")
    print(f"  -F 'prompt_general={prompt}' \\")
    print(f"  -F 'processing_mode={mode}'")
    
    # Tambi√©n mostrar el comando con escape de caracteres para copiar y pegar
    escaped_fields = fields_json.replace('"', '\\"')
    escaped_prompt = prompt.replace('"', '\\"')
    
    print(f"\nüìã COMANDO LISTO PARA COPIAR:")
    print(f'curl -X POST "http://159.203.149.247:8000/api/v1/documents/process-upload" \\')
    print(f'  -F "file=@tests/Documentos/Invoice_2082463105.pdf" \\')
    print(f'  -F "fields_config={escaped_fields}" \\')
    print(f'  -F "prompt_general={escaped_prompt}" \\')
    print(f'  -F "processing_mode={mode}"')

def main():
    """Funci√≥n principal que ejecuta todas las pruebas"""
    print("üöÄ SISTEMA IDP DIN√ÅMICO - CONFIGURACIONES DE PRUEBA")
    print("=" * 70)
    
    # Lista de configuraciones de prueba
    configuraciones = [
        ("FACTURA COLOMBIANA", test_factura_colombiana()),
        ("C√âDULA COLOMBIANA", test_cedula_colombiana()),
        ("RECIBO DE SERVICIOS", test_recibo_servicios())
    ]
    
    # Mostrar cada configuraci√≥n y generar comandos curl
    for nombre_test, config in configuraciones:
        print(f"\n{'='*70}")
        print(f"üßæ {nombre_test}")
        mostrar_configuracion(config)
        generar_comando_curl(config, nombre_test)
    
    print(f"\n{'='*70}")
    print("‚úÖ TODAS LAS CONFIGURACIONES GENERADAS")
    print("\nüéØ CARACTER√çSTICAS DEL SISTEMA:")
    print("1. ‚úÖ Completamente din√°mico - campos configurables via HTTP")
    print("2. ‚úÖ Soporta cualquier tipo de documento")
    print("3. ‚úÖ Reglas del sistema aplicadas autom√°ticamente")
    print("4. ‚úÖ Validaci√≥n de JSON en tiempo real")
    print("5. ‚úÖ Campos por defecto si no se especifica configuraci√≥n")
    print("6. ‚úÖ Logs detallados del proceso")
    
    print("\nüîß ENDPOINTS DISPONIBLES:")
    print("‚Ä¢ POST /process-upload - Con configuraci√≥n personalizada")
    print("‚Ä¢ POST /process-upload-custom - Con configuraci√≥n personalizada (alternativo)")
    print("‚Ä¢ GET /{job_id}/status - Consultar estado")
    print("‚Ä¢ GET /{job_id}/result - Obtener resultado")
    
    print("\nüí° USO EN PRODUCCI√ìN:")
    print("‚Ä¢ Env√≠a la configuraci√≥n de campos en cada petici√≥n")
    print("‚Ä¢ No necesitas archivos de configuraci√≥n locales")
    print("‚Ä¢ El sistema se adapta a cualquier tipo de documento")
    print("‚Ä¢ Las reglas se aplican seg√∫n el contexto del prompt")

if __name__ == "__main__":
    main()
